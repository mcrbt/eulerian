Title:		eulerian

Author:		Daniel Haase

Contact:	prjctntfctn@web.de

Version:	0.2.1

Release:	Aug 1, 2016

Compilation:	gcc -o eulerian -O3 -Wall -Werror -pedantic eulerian.c

Usage:		./eulerian <input_filename>

Description:	Given an input file of specific format describing a graph,
		this code computes an Eulerian trail (Eulerian path) through
		that graph iff one exists. It is able to detect if there
		cannot be such a trail prior to computation to increase
		responsiveness of the program.

		The input format is as follows:
		The first line contains the number of nodes in that graph.
		All following lines contain an edge description of the form
		"a b". a and b are names (labels) of nodes where there is
		an edge from a to b. Node labels are typically numbers and
		separated by exactly one space (' ') symbol and end with a
		newline ('\n') symbol.
		The output format is as follows:
		If there is an Eulerian trail in the specified graph a sequence
		of node labels separated by exactly one space (' ') are printed
		to STDOUT (standard out, unix file descriptor 1) followed by a
		newline ('\n') symbol. If there is no trail in that graph a -1
		followed by a newline ('\n') is printed to STDOUT.
		Warnings and errors are printed to STDERR (file descriptor 2)
		occasionally IN ADDITION to the '-1'.

		If the node number in the first line of the input file is greater
		the the number of different node labels in the following lines it
		is assumed that there are nodes of degree 0 (not connected to any
		other nodes). In this case there is no Eulerian trail, at all.
		Additionally a warning is printed to STDERR.

Reliability:	This code passed serveral semi-automated tests including tests
		for memory leaks. It is able to handle large input files with
		hundreds of nodes and thousands of edges efficiently.

References:	German (original)
			Eulerkreisproblem/ Algorithmus von Hierholzer
				https://de.wikipedia.org/wiki/Eulerkreisproblem
			Graph-Zusammenhang
				https://de.wikipedia.org/wiki/Zusammenhang_%28Graphentheorie%29
			Tiefensuche
				https://de.wikipedia.org/wiki/Tiefensuche
				http://www2.informatik.hu-berlin.de/~kschmidt/Tiefensuche.pdf
			Algorithmnusbeschreibung
				http://www.zahlendoktor.de/eulerweg_finden.html

		English (adopted)
			Eulerian path/ Hierholzer's algorithm
				https://en.wikipedia.org/wiki/Eulerian_path
			Connectivity (Graph theory)
				https://en.wikipedia.org/wiki/Connectivity_(graph_theory)
			Depth First Search (DFS)
				https://en.wikipedia.org/wiki/Depth-first_search
